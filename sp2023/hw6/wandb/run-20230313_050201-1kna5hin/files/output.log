Loading the dataset ...
Slicing the data...
Size of the loaded dataset:
 - train: 8000
 - dev: 3270
 - test: 1427
Loading the tokenizer...
Loding the data into DS...
 >>>>>>>> Initializing the data loaders ...
Loading the model ...
Found cached dataset boolq (/home/jchen291/.cache/huggingface/datasets/boolq/default/0.1.0/bf0dd57da941c50de94ae3ce3cef7fea48c08f337a4b7aac484e9dddc5aa24e5)
100%|██████████| 2/2 [00:00<00:00, 677.43it/s]
Some weights of the model checkpoint at bert-base-cased were not used when initializing BertForSequenceClassification: ['cls.predictions.transform.dense.bias', 'cls.seq_relationship.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.seq_relationship.weight', 'cls.predictions.decoder.weight', 'cls.predictions.bias', 'cls.predictions.transform.LayerNorm.bias']
- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-cased and are newly initialized: ['classifier.weight', 'classifier.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Moving model to device ...cuda
 >>>>>>>>  Starting training ...
 >>>>>>>>  Initializing optimizer
Epoch 1 training:
 ===> Epoch 1
 - Average training metrics: accuracy=0.59525
Traceback (most recent call last):
  File "classification.py", line 289, in <module>
    train(pretrained_model,args.num_epochs,train_dataloader,validation_dataloader,args.device,args.lr)
  File "classification.py", line 183, in train
    val_accuracy = evaluate_model(mymodel, validation_dataloader, device)
  File "classification.py", line 95, in evaluate_model
    output = model(input_ids=input_ids, attention_mask=attention_mask)
  File "/home/jchen291/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/jchen291/.local/lib/python3.8/site-packages/transformers/models/bert/modeling_bert.py", line 1563, in forward
    outputs = self.bert(
  File "/home/jchen291/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/jchen291/.local/lib/python3.8/site-packages/transformers/models/bert/modeling_bert.py", line 1019, in forward
    encoder_outputs = self.encoder(
  File "/home/jchen291/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/jchen291/.local/lib/python3.8/site-packages/transformers/models/bert/modeling_bert.py", line 609, in forward
    layer_outputs = layer_module(
  File "/home/jchen291/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/jchen291/.local/lib/python3.8/site-packages/transformers/models/bert/modeling_bert.py", line 537, in forward
    layer_output = apply_chunking_to_forward(
  File "/home/jchen291/.local/lib/python3.8/site-packages/transformers/pytorch_utils.py", line 249, in apply_chunking_to_forward
    return forward_fn(*input_tensors)
  File "/home/jchen291/.local/lib/python3.8/site-packages/transformers/models/bert/modeling_bert.py", line 550, in feed_forward_chunk
    layer_output = self.output(intermediate_output, attention_output)
  File "/home/jchen291/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/jchen291/.local/lib/python3.8/site-packages/transformers/models/bert/modeling_bert.py", line 464, in forward
    hidden_states = self.LayerNorm(hidden_states + input_tensor)
  File "/home/jchen291/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/jchen291/.local/lib/python3.8/site-packages/torch/nn/modules/normalization.py", line 190, in forward
    return F.layer_norm(
  File "/home/jchen291/.local/lib/python3.8/site-packages/torch/nn/functional.py", line 2515, in layer_norm
    return torch.layer_norm(input, normalized_shape, weight, bias, eps, torch.backends.cudnn.enabled)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 24.00 MiB (GPU 0; 9.50 GiB total capacity; 8.46 GiB already allocated; 17.75 MiB free; 8.58 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF